Recursive function

Complexity: O(logn)

t(n) = c + t(n/2)
t(n/2) = c + t(n/4)
t(n/4) = c + t(n/8)


t(2) = c + t(1)
t(1) = k1


`````````````````````````````add all```````````````````````````
t(n) = a*c+k1

`````````````````````````````Sum of all```````````````````````````

log(a)=log(n/2)        take log on both sides

log(a) = log(n) - log(2)

log(a) = log(n)


----------------------------------------------------------------------------------------------------------------------------


Factorial

Complexity: O(n)

t(n) = c + t(n-1)
t(n-1) = c + t(n-2)
t(n-2) = c + t(n-3)


t(1) = c + t(0)
t(0) = k1

`````````````````````````````add all```````````````````````````
t(n) = n*c+k1
`````````````````````````````Sum of all```````````````````````````

t(n) = n


----------------------------------------------------------------------------------------------------------------------------


Fibonacci

Complexity: O(2^n)

t(n) = c + t(n-1) + t(n-2)
t(n-1) = c + t(n-2) + t(n-3)
t(n-2) = c + t(n-3) + t(n-4)


t(1) = c + t(0)
t(0) = k1

`````````````````````````````add all```````````````````````````
t(n) = 2^n*c+k1
`````````````````````````````Sum of all```````````````````````````

t(n) = 2^n


`````````````````````````````````````````````````````````By Recursive tree``````````````````````````````````````````

Akra-Bazzi

T(x) = g(x) + \sum_{i=1}^{k} a_i T(b_i x + h_i(x))

link :- https://www.geeksforgeeks.org/akra-bazzi-method-for-finding-the-time-complexities/

----------------------------------------------------------------------------------------------------------------------------

Master Theorem

T(n) = aT(n/b) + f(n)

link :- https://www.geeksforgeeks.org/master-theorem-for-divide-and-conquer-recurrences/



----------------------------------------------------------------------------------------------------------------------------


